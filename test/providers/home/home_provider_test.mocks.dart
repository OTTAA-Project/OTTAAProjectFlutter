// Mocks generated by Mockito 5.3.2 from annotations
// in ottaa_project_flutter/test/providers/home/home_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i9;

import 'package:either_dart/either.dart' as _i3;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i20;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ottaa_project_flutter/application/notifiers/patient_notifier.dart'
    as _i19;
import 'package:ottaa_project_flutter/application/notifiers/user_notifier.dart'
    as _i22;
import 'package:ottaa_project_flutter/application/providers/chatgpt_provider.dart'
    as _i18;
import 'package:ottaa_project_flutter/application/providers/tts_provider.dart'
    as _i6;
import 'package:ottaa_project_flutter/core/abstracts/basic_search.dart' as _i12;
import 'package:ottaa_project_flutter/core/abstracts/user_model.dart' as _i5;
import 'package:ottaa_project_flutter/core/models/group_model.dart' as _i11;
import 'package:ottaa_project_flutter/core/models/learn_token.dart' as _i17;
import 'package:ottaa_project_flutter/core/models/patient_user_model.dart'
    as _i4;
import 'package:ottaa_project_flutter/core/models/phrase_model.dart' as _i10;
import 'package:ottaa_project_flutter/core/models/picto_model.dart' as _i13;
import 'package:ottaa_project_flutter/core/models/picto_predicted_reduced.dart'
    as _i15;
import 'package:ottaa_project_flutter/core/models/voices_model.dart' as _i8;
import 'package:ottaa_project_flutter/core/repositories/repositories.dart'
    as _i2;
import 'package:ottaa_project_flutter/core/use_cases/learn_pictogram.dart'
    as _i16;
import 'package:ottaa_project_flutter/core/use_cases/predict_pictogram.dart'
    as _i14;
import 'package:state_notifier/state_notifier.dart' as _i21;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTTSRepository_0 extends _i1.SmartFake implements _i2.TTSRepository {
  _FakeTTSRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeServerRepository_2 extends _i1.SmartFake
    implements _i2.ServerRepository {
  _FakeServerRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePatientUserModel_3 extends _i1.SmartFake
    implements _i4.PatientUserModel {
  _FakePatientUserModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_4 extends _i1.SmartFake implements _i5.UserModel {
  _FakeUserModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TTSProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTTSProvider extends _i1.Mock implements _i6.TTSProvider {
  MockTTSProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TTSRepository get tts => (super.noSuchMethod(
        Invocation.getter(#tts),
        returnValue: _FakeTTSRepository_0(
          this,
          Invocation.getter(#tts),
        ),
      ) as _i2.TTSRepository);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i7.Future<void> speak(String? text) => (super.noSuchMethod(
        Invocation.method(
          #speak,
          [text],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<_i8.Voices>> fetchVoices(String? languageCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchVoices,
          [languageCode],
        ),
        returnValue: _i7.Future<List<_i8.Voices>>.value(<_i8.Voices>[]),
      ) as _i7.Future<List<_i8.Voices>>);
  @override
  _i7.Future<void> changeVoiceSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #changeVoiceSpeed,
          [speed],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> changeCustomTTs(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #changeCustomTTs,
          [value],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> changeTTSVoice(String? voice) => (super.noSuchMethod(
        Invocation.method(
          #changeTTSVoice,
          [voice],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SentencesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSentencesRepository extends _i1.Mock
    implements _i2.SentencesRepository {
  MockSentencesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.Either<String, List<_i10.Phrase>>> fetchSentences({
    required String? language,
    required String? type,
    bool? isFavorite = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSentences,
          [],
          {
            #language: language,
            #type: type,
            #isFavorite: isFavorite,
          },
        ),
        returnValue: _i7.Future<_i3.Either<String, List<_i10.Phrase>>>.value(
            _FakeEither_1<String, List<_i10.Phrase>>(
          this,
          Invocation.method(
            #fetchSentences,
            [],
            {
              #language: language,
              #type: type,
              #isFavorite: isFavorite,
            },
          ),
        )),
      ) as _i7.Future<_i3.Either<String, List<_i10.Phrase>>>);
  @override
  _i7.Future<_i3.Either<String, void>> uploadSentences({
    required String? language,
    required List<_i10.Phrase>? data,
    required String? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadSentences,
          [],
          {
            #language: language,
            #data: data,
            #type: type,
          },
        ),
        returnValue: _i7.Future<_i3.Either<String, void>>.value(
            _FakeEither_1<String, void>(
          this,
          Invocation.method(
            #uploadSentences,
            [],
            {
              #language: language,
              #data: data,
              #type: type,
            },
          ),
        )),
      ) as _i7.Future<_i3.Either<String, void>>);
}

/// A class which mocks [GroupsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupsRepository extends _i1.Mock implements _i2.GroupsRepository {
  MockGroupsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i11.Group>> getAllGroups({bool? defaultGroups = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGroups,
          [],
          {#defaultGroups: defaultGroups},
        ),
        returnValue: _i7.Future<List<_i11.Group>>.value(<_i11.Group>[]),
      ) as _i7.Future<List<_i11.Group>>);
  @override
  _i7.Future<List<_i11.Group>> getDefaultGroups() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultGroups,
          [],
        ),
        returnValue: _i7.Future<List<_i11.Group>>.value(<_i11.Group>[]),
      ) as _i7.Future<List<_i11.Group>>);
  @override
  _i7.Future<void> uploadGroups(
    List<_i11.Group>? data,
    String? type,
    String? language, {
    String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadGroups,
          [
            data,
            type,
            language,
          ],
          {#userId: userId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> updateGroups(
    _i11.Group? data,
    String? type,
    String? language,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroups,
          [
            data,
            type,
            language,
            index,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<_i11.Group>> getGroups(_i12.BasicSearch? search) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroups,
          [search],
        ),
        returnValue: _i7.Future<List<_i11.Group>>.value(<_i11.Group>[]),
      ) as _i7.Future<List<_i11.Group>>);
}

/// A class which mocks [PictogramsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPictogramsRepository extends _i1.Mock
    implements _i2.PictogramsRepository {
  MockPictogramsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i13.Picto>> getAllPictograms() => (super.noSuchMethod(
        Invocation.method(
          #getAllPictograms,
          [],
        ),
        returnValue: _i7.Future<List<_i13.Picto>>.value(<_i13.Picto>[]),
      ) as _i7.Future<List<_i13.Picto>>);
  @override
  _i7.Future<void> uploadPictograms(
    List<_i13.Picto>? data,
    String? language, {
    String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadPictograms,
          [
            data,
            language,
          ],
          {#userId: userId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> updatePictogram(
    _i13.Picto? pictogram,
    String? language,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePictogram,
          [
            pictogram,
            language,
            index,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<_i13.Picto>> getPictograms(_i12.BasicSearch? search) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPictograms,
          [search],
        ),
        returnValue: _i7.Future<List<_i13.Picto>>.value(<_i13.Picto>[]),
      ) as _i7.Future<List<_i13.Picto>>);
}

/// A class which mocks [PredictPictogram].
///
/// See the documentation for Mockito's code generation for more information.
class MockPredictPictogram extends _i1.Mock implements _i14.PredictPictogram {
  MockPredictPictogram() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ServerRepository get serverRepository => (super.noSuchMethod(
        Invocation.getter(#serverRepository),
        returnValue: _FakeServerRepository_2(
          this,
          Invocation.getter(#serverRepository),
        ),
      ) as _i2.ServerRepository);
  @override
  set serverRepository(_i2.ServerRepository? _serverRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #serverRepository,
          _serverRepository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i3.Either<String, List<_i15.PictoPredictedReduced>>> call({
    required String? sentence,
    required String? uid,
    required String? language,
    required String? model,
    required List<String>? groups,
    required Map<String, List<String>>? tags,
    bool? reduced = false,
    int? limit = 10,
    int? chunk = 4,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #sentence: sentence,
            #uid: uid,
            #language: language,
            #model: model,
            #groups: groups,
            #tags: tags,
            #reduced: reduced,
            #limit: limit,
            #chunk: chunk,
          },
        ),
        returnValue: _i7.Future<
                _i3.Either<String, List<_i15.PictoPredictedReduced>>>.value(
            _FakeEither_1<String, List<_i15.PictoPredictedReduced>>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #sentence: sentence,
              #uid: uid,
              #language: language,
              #model: model,
              #groups: groups,
              #tags: tags,
              #reduced: reduced,
              #limit: limit,
              #chunk: chunk,
            },
          ),
        )),
      ) as _i7.Future<_i3.Either<String, List<_i15.PictoPredictedReduced>>>);
}

/// A class which mocks [LearnPictogram].
///
/// See the documentation for Mockito's code generation for more information.
class MockLearnPictogram extends _i1.Mock implements _i16.LearnPictogram {
  MockLearnPictogram() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ServerRepository get serverRepository => (super.noSuchMethod(
        Invocation.getter(#serverRepository),
        returnValue: _FakeServerRepository_2(
          this,
          Invocation.getter(#serverRepository),
        ),
      ) as _i2.ServerRepository);
  @override
  set serverRepository(_i2.ServerRepository? _serverRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #serverRepository,
          _serverRepository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i3.Either<String, String>> call({
    required String? sentence,
    required String? uid,
    required String? language,
    required String? model,
    required List<_i17.LearnToken>? tokens,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #sentence: sentence,
            #uid: uid,
            #language: language,
            #model: model,
            #tokens: tokens,
          },
        ),
        returnValue: _i7.Future<_i3.Either<String, String>>.value(
            _FakeEither_1<String, String>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #sentence: sentence,
              #uid: uid,
              #language: language,
              #model: model,
              #tokens: tokens,
            },
          ),
        )),
      ) as _i7.Future<_i3.Either<String, String>>);
}

/// A class which mocks [ChatGPTNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatGPTNotifier extends _i1.Mock implements _i18.ChatGPTNotifier {
  MockChatGPTNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i7.Future<String?> generatePhrase(List<_i13.Picto>? pictograms) =>
      (super.noSuchMethod(
        Invocation.method(
          #generatePhrase,
          [pictograms],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);
  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PatientNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatientNotifier extends _i1.Mock implements _i19.PatientNotifier {
  @override
  _i4.PatientUserModel get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakePatientUserModel_3(
          this,
          Invocation.getter(#user),
        ),
        returnValueForMissingStub: _FakePatientUserModel_3(
          this,
          Invocation.getter(#user),
        ),
      ) as _i4.PatientUserModel);
  @override
  set onError(_i20.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i7.Stream<_i4.PatientUserModel?> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i4.PatientUserModel?>.empty(),
        returnValueForMissingStub: _i7.Stream<_i4.PatientUserModel?>.empty(),
      ) as _i7.Stream<_i4.PatientUserModel?>);
  @override
  set state(_i4.PatientUserModel? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setUser(_i4.PatientUserModel? user) => super.noSuchMethod(
        Invocation.method(
          #setUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool updateShouldNotify(
    _i4.PatientUserModel? old,
    _i4.PatientUserModel? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i20.RemoveListener addListener(
    _i21.Listener<_i4.PatientUserModel?>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i20.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserNotifier extends _i1.Mock implements _i22.UserNotifier {
  @override
  _i5.UserModel get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUserModel_4(
          this,
          Invocation.getter(#user),
        ),
        returnValueForMissingStub: _FakeUserModel_4(
          this,
          Invocation.getter(#user),
        ),
      ) as _i5.UserModel);
  @override
  set onError(_i20.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i7.Stream<_i5.UserModel?> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i5.UserModel?>.empty(),
        returnValueForMissingStub: _i7.Stream<_i5.UserModel?>.empty(),
      ) as _i7.Stream<_i5.UserModel?>);
  @override
  set state(_i5.UserModel? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setUser(_i5.UserModel? user) => super.noSuchMethod(
        Invocation.method(
          #setUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool updateShouldNotify(
    _i5.UserModel? old,
    _i5.UserModel? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i20.RemoveListener addListener(
    _i21.Listener<_i5.UserModel?>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i20.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
