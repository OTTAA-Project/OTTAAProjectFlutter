// Mocks generated by Mockito 5.3.2 from annotations
// in ottaa_project_flutter/test/providers/customise/customise_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i2;

import 'package:either_dart/src/either.dart' as _i4;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ottaa_project_flutter/application/common/i18n.dart' as _i3;
import 'package:ottaa_project_flutter/application/language/translation_tree.dart'
    as _i7;
import 'package:ottaa_project_flutter/application/notifiers/user_notifier.dart'
    as _i16;
import 'package:ottaa_project_flutter/core/abstracts/basic_search.dart' as _i14;
import 'package:ottaa_project_flutter/core/abstracts/user_model.dart' as _i6;
import 'package:ottaa_project_flutter/core/models/group_model.dart' as _i11;
import 'package:ottaa_project_flutter/core/models/picto_model.dart' as _i12;
import 'package:ottaa_project_flutter/core/models/shortcuts_model.dart' as _i5;
import 'package:ottaa_project_flutter/core/repositories/customise_repository.dart'
    as _i10;
import 'package:ottaa_project_flutter/core/repositories/groups_repository.dart'
    as _i13;
import 'package:ottaa_project_flutter/core/repositories/local_database_repository.dart'
    as _i9;
import 'package:ottaa_project_flutter/core/repositories/pictograms_repository.dart'
    as _i15;
import 'package:state_notifier/state_notifier.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeI18N_1 extends _i1.SmartFake implements _i3.I18N {
  _FakeI18N_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeShortcutsModel_3 extends _i1.SmartFake
    implements _i5.ShortcutsModel {
  _FakeShortcutsModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_4 extends _i1.SmartFake implements _i6.UserModel {
  _FakeUserModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [I18N].
///
/// See the documentation for Mockito's code generation for more information.
class MockI18N extends _i1.Mock implements _i3.I18N {
  MockI18N() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i2.Locale> get platformLanguages => (super.noSuchMethod(
        Invocation.getter(#platformLanguages),
        returnValue: <String, _i2.Locale>{},
      ) as Map<String, _i2.Locale>);
  @override
  _i2.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_0(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i2.Locale);
  @override
  set locale(_i2.Locale? _locale) => super.noSuchMethod(
        Invocation.setter(
          #locale,
          _locale,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set currentLanguage(_i7.TranslationTree? _currentLanguage) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentLanguage,
          _currentLanguage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i8.Future<_i3.I18N> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<_i3.I18N>.value(_FakeI18N_1(
          this,
          Invocation.method(
            #init,
            [],
          ),
        )),
      ) as _i8.Future<_i3.I18N>);
  @override
  _i8.Future<_i7.TranslationTree?> loadTranslation(_i2.Locale? locale) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadTranslation,
          [locale],
        ),
        returnValue: _i8.Future<_i7.TranslationTree?>.value(),
      ) as _i8.Future<_i7.TranslationTree?>);
  @override
  _i8.Future<void> changeLanguage(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #changeLanguage,
          [languageCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> changeLanguageFromLocale(_i2.Locale? locale) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeLanguageFromLocale,
          [locale],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void notify() => super.noSuchMethod(
        Invocation.method(
          #notify,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocalDatabaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseRepository extends _i1.Mock
    implements _i9.LocalDatabaseRepository {
  MockLocalDatabaseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set user(_i6.UserModel? user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          user,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setUser(_i6.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #setUser,
          [user],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i6.UserModel?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i8.Future<_i6.UserModel?>.value(),
      ) as _i8.Future<_i6.UserModel?>);
  @override
  _i8.Future<void> deleteUser() => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<bool> getIntro() => (super.noSuchMethod(
        Invocation.method(
          #getIntro,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<void> setIntro([bool? value]) => (super.noSuchMethod(
        Invocation.method(
          #setIntro,
          [value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [CustomiseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomiseRepository extends _i1.Mock
    implements _i10.CustomiseRepository {
  MockCustomiseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.Either<String, void>> setShortcutsForUser({
    required _i5.ShortcutsModel? shortcuts,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setShortcutsForUser,
          [],
          {
            #shortcuts: shortcuts,
            #userId: userId,
          },
        ),
        returnValue: _i8.Future<_i4.Either<String, void>>.value(
            _FakeEither_2<String, void>(
          this,
          Invocation.method(
            #setShortcutsForUser,
            [],
            {
              #shortcuts: shortcuts,
              #userId: userId,
            },
          ),
        )),
      ) as _i8.Future<_i4.Either<String, void>>);
  @override
  _i8.Future<List<_i11.Group>> fetchDefaultGroups(
          {required String? languageCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDefaultGroups,
          [],
          {#languageCode: languageCode},
        ),
        returnValue: _i8.Future<List<_i11.Group>>.value(<_i11.Group>[]),
      ) as _i8.Future<List<_i11.Group>>);
  @override
  _i8.Future<List<_i12.Picto>> fetchDefaultPictos(
          {required String? languageCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDefaultPictos,
          [],
          {#languageCode: languageCode},
        ),
        returnValue: _i8.Future<List<_i12.Picto>>.value(<_i12.Picto>[]),
      ) as _i8.Future<List<_i12.Picto>>);
  @override
  _i8.Future<_i5.ShortcutsModel> fetchShortcutsForUser(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchShortcutsForUser,
          [],
          {#userId: userId},
        ),
        returnValue: _i8.Future<_i5.ShortcutsModel>.value(_FakeShortcutsModel_3(
          this,
          Invocation.method(
            #fetchShortcutsForUser,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i8.Future<_i5.ShortcutsModel>);
  @override
  _i8.Future<List<_i11.Group>> fetchUserGroups({
    required String? languageCode,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserGroups,
          [],
          {
            #languageCode: languageCode,
            #userId: userId,
          },
        ),
        returnValue: _i8.Future<List<_i11.Group>>.value(<_i11.Group>[]),
      ) as _i8.Future<List<_i11.Group>>);
  @override
  _i8.Future<List<_i12.Picto>> fetchUserPictos({
    required String? languageCode,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserPictos,
          [],
          {
            #languageCode: languageCode,
            #userId: userId,
          },
        ),
        returnValue: _i8.Future<List<_i12.Picto>>.value(<_i12.Picto>[]),
      ) as _i8.Future<List<_i12.Picto>>);
  @override
  _i8.Future<bool> valuesExistOrNot({
    required String? languageCode,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesExistOrNot,
          [],
          {
            #languageCode: languageCode,
            #userId: userId,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [GroupsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupsRepository extends _i1.Mock implements _i13.GroupsRepository {
  MockGroupsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i11.Group>> getAllGroups({bool? defaultGroups = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGroups,
          [],
          {#defaultGroups: defaultGroups},
        ),
        returnValue: _i8.Future<List<_i11.Group>>.value(<_i11.Group>[]),
      ) as _i8.Future<List<_i11.Group>>);
  @override
  _i8.Future<List<_i11.Group>> getDefaultGroups() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultGroups,
          [],
        ),
        returnValue: _i8.Future<List<_i11.Group>>.value(<_i11.Group>[]),
      ) as _i8.Future<List<_i11.Group>>);
  @override
  _i8.Future<void> uploadGroups(
    List<_i11.Group>? data,
    String? type,
    String? language, {
    String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadGroups,
          [
            data,
            type,
            language,
          ],
          {#userId: userId},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> updateGroups(
    _i11.Group? data,
    String? type,
    String? language,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroups,
          [
            data,
            type,
            language,
            index,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<List<_i11.Group>> getGroups(_i14.BasicSearch? search) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroups,
          [search],
        ),
        returnValue: _i8.Future<List<_i11.Group>>.value(<_i11.Group>[]),
      ) as _i8.Future<List<_i11.Group>>);
}

/// A class which mocks [PictogramsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPictogramsRepository extends _i1.Mock
    implements _i15.PictogramsRepository {
  MockPictogramsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i12.Picto>> getAllPictograms() => (super.noSuchMethod(
        Invocation.method(
          #getAllPictograms,
          [],
        ),
        returnValue: _i8.Future<List<_i12.Picto>>.value(<_i12.Picto>[]),
      ) as _i8.Future<List<_i12.Picto>>);
  @override
  _i8.Future<void> uploadPictograms(
    List<_i12.Picto>? data,
    String? language, {
    String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadPictograms,
          [
            data,
            language,
          ],
          {#userId: userId},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> updatePictogram(
    _i12.Picto? pictogram,
    String? language,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePictogram,
          [
            pictogram,
            language,
            index,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<List<_i12.Picto>> getPictograms(_i14.BasicSearch? search) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPictograms,
          [search],
        ),
        returnValue: _i8.Future<List<_i12.Picto>>.value(<_i12.Picto>[]),
      ) as _i8.Future<List<_i12.Picto>>);
}

/// A class which mocks [UserNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserNotifier extends _i1.Mock implements _i16.UserNotifier {
  MockUserNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.UserModel get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUserModel_4(
          this,
          Invocation.getter(#user),
        ),
      ) as _i6.UserModel);
  @override
  set onError(_i17.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  _i8.Stream<_i6.UserModel?> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i6.UserModel?>.empty(),
      ) as _i8.Stream<_i6.UserModel?>);
  @override
  set state(_i6.UserModel? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void setUser(_i6.UserModel? user) => super.noSuchMethod(
        Invocation.method(
          #setUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool updateShouldNotify(
    _i6.UserModel? old,
    _i6.UserModel? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i17.RemoveListener addListener(
    _i18.Listener<_i6.UserModel?>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i17.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
