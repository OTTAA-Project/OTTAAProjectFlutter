// Mocks generated by Mockito 5.4.0 from annotations
// in ottaa_project_flutter/test/providers/games/chat_gpt_game_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i10;

import 'package:either_dart/either.dart' as _i6;
import 'package:flutter/material.dart' as _i2;
import 'package:just_audio/just_audio.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ottaa_project_flutter/application/notifiers/patient_notifier.dart'
    as _i5;
import 'package:ottaa_project_flutter/application/providers/games_provider.dart'
    as _i7;
import 'package:ottaa_project_flutter/core/models/group_model.dart' as _i9;
import 'package:ottaa_project_flutter/core/models/picto_model.dart' as _i8;
import 'package:ottaa_project_flutter/core/repositories/repositories.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePageController_0 extends _i1.SmartFake
    implements _i2.PageController {
  _FakePageController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollController_1 extends _i1.SmartFake
    implements _i2.ScrollController {
  _FakeScrollController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimer_2 extends _i1.SmartFake implements _i3.Timer {
  _FakeTimer_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioPlayer_3 extends _i1.SmartFake implements _i4.AudioPlayer {
  _FakeAudioPlayer_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePatientNotifier_4 extends _i1.SmartFake
    implements _i5.PatientNotifier {
  _FakePatientNotifier_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_5<L, R> extends _i1.SmartFake implements _i6.Either<L, R> {
  _FakeEither_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GamesProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGamesProvider extends _i1.Mock implements _i7.GamesProvider {
  MockGamesProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get numberOfGroups => (super.noSuchMethod(
        Invocation.getter(#numberOfGroups),
        returnValue: 0,
      ) as int);
  @override
  set numberOfGroups(int? _numberOfGroups) => super.noSuchMethod(
        Invocation.setter(
          #numberOfGroups,
          _numberOfGroups,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get completedGroups => (super.noSuchMethod(
        Invocation.getter(#completedGroups),
        returnValue: 0,
      ) as int);
  @override
  set completedGroups(int? _completedGroups) => super.noSuchMethod(
        Invocation.setter(
          #completedGroups,
          _completedGroups,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get activeGroups => (super.noSuchMethod(
        Invocation.getter(#activeGroups),
        returnValue: 0,
      ) as int);
  @override
  set activeGroups(int? _activeGroups) => super.noSuchMethod(
        Invocation.setter(
          #activeGroups,
          _activeGroups,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get selectedGame => (super.noSuchMethod(
        Invocation.getter(#selectedGame),
        returnValue: 0,
      ) as int);
  @override
  set selectedGame(int? _selectedGame) => super.noSuchMethod(
        Invocation.setter(
          #selectedGame,
          _selectedGame,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get selectedGroupName => (super.noSuchMethod(
        Invocation.getter(#selectedGroupName),
        returnValue: '',
      ) as String);
  @override
  set selectedGroupName(String? _selectedGroupName) => super.noSuchMethod(
        Invocation.setter(
          #selectedGroupName,
          _selectedGroupName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.PageController get mainPageController => (super.noSuchMethod(
        Invocation.getter(#mainPageController),
        returnValue: _FakePageController_0(
          this,
          Invocation.getter(#mainPageController),
        ),
      ) as _i2.PageController);
  @override
  _i2.ScrollController get gridScrollController => (super.noSuchMethod(
        Invocation.getter(#gridScrollController),
        returnValue: _FakeScrollController_1(
          this,
          Invocation.getter(#gridScrollController),
        ),
      ) as _i2.ScrollController);
  @override
  set gridScrollController(_i2.ScrollController? _gridScrollController) =>
      super.noSuchMethod(
        Invocation.setter(
          #gridScrollController,
          _gridScrollController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, _i8.Picto> get pictograms => (super.noSuchMethod(
        Invocation.getter(#pictograms),
        returnValue: <String, _i8.Picto>{},
      ) as Map<String, _i8.Picto>);
  @override
  set pictograms(Map<String, _i8.Picto>? _pictograms) => super.noSuchMethod(
        Invocation.setter(
          #pictograms,
          _pictograms,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, _i9.Group> get groups => (super.noSuchMethod(
        Invocation.getter(#groups),
        returnValue: <String, _i9.Group>{},
      ) as Map<String, _i9.Group>);
  @override
  set groups(Map<String, _i9.Group>? _groups) => super.noSuchMethod(
        Invocation.setter(
          #groups,
          _groups,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get correctScore => (super.noSuchMethod(
        Invocation.getter(#correctScore),
        returnValue: 0,
      ) as int);
  @override
  set correctScore(int? _correctScore) => super.noSuchMethod(
        Invocation.setter(
          #correctScore,
          _correctScore,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get incorrectScore => (super.noSuchMethod(
        Invocation.getter(#incorrectScore),
        returnValue: 0,
      ) as int);
  @override
  set incorrectScore(int? _incorrectScore) => super.noSuchMethod(
        Invocation.setter(
          #incorrectScore,
          _incorrectScore,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i8.Picto> get selectedPicts => (super.noSuchMethod(
        Invocation.getter(#selectedPicts),
        returnValue: <_i8.Picto>[],
      ) as List<_i8.Picto>);
  @override
  set selectedPicts(List<_i8.Picto>? _selectedPicts) => super.noSuchMethod(
        Invocation.setter(
          #selectedPicts,
          _selectedPicts,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get useTime => (super.noSuchMethod(
        Invocation.getter(#useTime),
        returnValue: 0,
      ) as int);
  @override
  set useTime(int? _useTime) => super.noSuchMethod(
        Invocation.setter(
          #useTime,
          _useTime,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get streak => (super.noSuchMethod(
        Invocation.getter(#streak),
        returnValue: 0,
      ) as int);
  @override
  set streak(int? _streak) => super.noSuchMethod(
        Invocation.setter(
          #streak,
          _streak,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<bool> get matchPictoTop => (super.noSuchMethod(
        Invocation.getter(#matchPictoTop),
        returnValue: <bool>[],
      ) as List<bool>);
  @override
  set matchPictoTop(List<bool>? _matchPictoTop) => super.noSuchMethod(
        Invocation.setter(
          #matchPictoTop,
          _matchPictoTop,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<bool> get matchPictoBottom => (super.noSuchMethod(
        Invocation.getter(#matchPictoBottom),
        returnValue: <bool>[],
      ) as List<bool>);
  @override
  set matchPictoBottom(List<bool>? _matchPictoBottom) => super.noSuchMethod(
        Invocation.setter(
          #matchPictoBottom,
          _matchPictoBottom,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isMute => (super.noSuchMethod(
        Invocation.getter(#isMute),
        returnValue: false,
      ) as bool);
  @override
  set isMute(bool? _isMute) => super.noSuchMethod(
        Invocation.setter(
          #isMute,
          _isMute,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i8.Picto> get gamePictsWTP => (super.noSuchMethod(
        Invocation.getter(#gamePictsWTP),
        returnValue: <_i8.Picto>[],
      ) as List<_i8.Picto>);
  @override
  set gamePictsWTP(List<_i8.Picto>? _gamePictsWTP) => super.noSuchMethod(
        Invocation.setter(
          #gamePictsWTP,
          _gamePictsWTP,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i8.Picto> get gamePictsMP => (super.noSuchMethod(
        Invocation.getter(#gamePictsMP),
        returnValue: <_i8.Picto>[],
      ) as List<_i8.Picto>);
  @override
  set gamePictsMP(List<_i8.Picto>? _gamePictsMP) => super.noSuchMethod(
        Invocation.setter(
          #gamePictsMP,
          _gamePictsMP,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get correctPictoWTP => (super.noSuchMethod(
        Invocation.getter(#correctPictoWTP),
        returnValue: 0,
      ) as int);
  @override
  set correctPictoWTP(int? _correctPictoWTP) => super.noSuchMethod(
        Invocation.setter(
          #correctPictoWTP,
          _correctPictoWTP,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hintsBtn => (super.noSuchMethod(
        Invocation.getter(#hintsBtn),
        returnValue: false,
      ) as bool);
  @override
  set hintsBtn(bool? _hintsBtn) => super.noSuchMethod(
        Invocation.setter(
          #hintsBtn,
          _hintsBtn,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Timer get hintTimer1 => (super.noSuchMethod(
        Invocation.getter(#hintTimer1),
        returnValue: _FakeTimer_2(
          this,
          Invocation.getter(#hintTimer1),
        ),
      ) as _i3.Timer);
  @override
  set hintTimer1(_i3.Timer? _hintTimer1) => super.noSuchMethod(
        Invocation.setter(
          #hintTimer1,
          _hintTimer1,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Timer get hintTimer2 => (super.noSuchMethod(
        Invocation.getter(#hintTimer2),
        returnValue: _FakeTimer_2(
          this,
          Invocation.getter(#hintTimer2),
        ),
      ) as _i3.Timer);
  @override
  set hintTimer2(_i3.Timer? _hintTimer2) => super.noSuchMethod(
        Invocation.setter(
          #hintTimer2,
          _hintTimer2,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Timer get gameTimer => (super.noSuchMethod(
        Invocation.getter(#gameTimer),
        returnValue: _FakeTimer_2(
          this,
          Invocation.getter(#gameTimer),
        ),
      ) as _i3.Timer);
  @override
  set gameTimer(_i3.Timer? _gameTimer) => super.noSuchMethod(
        Invocation.setter(
          #gameTimer,
          _gameTimer,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hintsEnabled => (super.noSuchMethod(
        Invocation.getter(#hintsEnabled),
        returnValue: false,
      ) as bool);
  @override
  set hintsEnabled(bool? _hintsEnabled) => super.noSuchMethod(
        Invocation.setter(
          #hintsEnabled,
          _hintsEnabled,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get difficultyLevel => (super.noSuchMethod(
        Invocation.getter(#difficultyLevel),
        returnValue: 0,
      ) as int);
  @override
  set difficultyLevel(int? _difficultyLevel) => super.noSuchMethod(
        Invocation.setter(
          #difficultyLevel,
          _difficultyLevel,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.AudioPlayer get backgroundMusicPlayer => (super.noSuchMethod(
        Invocation.getter(#backgroundMusicPlayer),
        returnValue: _FakeAudioPlayer_3(
          this,
          Invocation.getter(#backgroundMusicPlayer),
        ),
      ) as _i4.AudioPlayer);
  @override
  _i4.AudioPlayer get clicksPlayer => (super.noSuchMethod(
        Invocation.getter(#clicksPlayer),
        returnValue: _FakeAudioPlayer_3(
          this,
          Invocation.getter(#clicksPlayer),
        ),
      ) as _i4.AudioPlayer);
  @override
  Map<int, _i8.Picto> get bottomPositionsMP => (super.noSuchMethod(
        Invocation.getter(#bottomPositionsMP),
        returnValue: <int, _i8.Picto>{},
      ) as Map<int, _i8.Picto>);
  @override
  set bottomPositionsMP(Map<int, _i8.Picto>? _bottomPositionsMP) =>
      super.noSuchMethod(
        Invocation.setter(
          #bottomPositionsMP,
          _bottomPositionsMP,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<int, _i8.Picto> get topPositionsMP => (super.noSuchMethod(
        Invocation.getter(#topPositionsMP),
        returnValue: <int, _i8.Picto>{},
      ) as Map<int, _i8.Picto>);
  @override
  set topPositionsMP(Map<int, _i8.Picto>? _topPositionsMP) =>
      super.noSuchMethod(
        Invocation.setter(
          #topPositionsMP,
          _topPositionsMP,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.PatientNotifier get patientState => (super.noSuchMethod(
        Invocation.getter(#patientState),
        returnValue: _FakePatientNotifier_4(
          this,
          Invocation.getter(#patientState),
        ),
      ) as _i5.PatientNotifier);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i3.Future<void> createRandomForGameWTP() => (super.noSuchMethod(
        Invocation.method(
          #createRandomForGameWTP,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> createRandomForGameMP() => (super.noSuchMethod(
        Invocation.method(
          #createRandomForGameMP,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> fetchSelectedPictos() => (super.noSuchMethod(
        Invocation.method(
          #fetchSelectedPictos,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void moveForward() => super.noSuchMethod(
        Invocation.method(
          #moveForward,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveBackward() => super.noSuchMethod(
        Invocation.method(
          #moveBackward,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void scrollUp() => super.noSuchMethod(
        Invocation.method(
          #scrollUp,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void scrollDown() => super.noSuchMethod(
        Invocation.method(
          #scrollDown,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<void> fetchPictograms() => (super.noSuchMethod(
        Invocation.method(
          #fetchPictograms,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> checkAnswerMatchPicto({
    required bool? upper,
    required int? index,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAnswerMatchPicto,
          [],
          {
            #upper: upper,
            #index: index,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> showHints() => (super.noSuchMethod(
        Invocation.method(
          #showHints,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> cancelHints() => (super.noSuchMethod(
        Invocation.method(
          #cancelHints,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void notify() => super.noSuchMethod(
        Invocation.method(
          #notify,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<void> playClickSounds({required String? assetName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #playClickSounds,
          [],
          {#assetName: assetName},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> changeMusic({required bool? mute}) => (super.noSuchMethod(
        Invocation.method(
          #changeMusic,
          [],
          {#mute: mute},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> initializeBackgroundMusic() => (super.noSuchMethod(
        Invocation.method(
          #initializeBackgroundMusic,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ChatGPTRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatGPTRepository extends _i1.Mock implements _i11.ChatGPTRepository {
  MockChatGPTRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i6.Either<String, String>> getCompletion({
    required int? age,
    required String? gender,
    required String? pictograms,
    required String? language,
    int? maxTokens = 500,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletion,
          [],
          {
            #age: age,
            #gender: gender,
            #pictograms: pictograms,
            #language: language,
            #maxTokens: maxTokens,
          },
        ),
        returnValue: _i3.Future<_i6.Either<String, String>>.value(
            _FakeEither_5<String, String>(
          this,
          Invocation.method(
            #getCompletion,
            [],
            {
              #age: age,
              #gender: gender,
              #pictograms: pictograms,
              #language: language,
              #maxTokens: maxTokens,
            },
          ),
        )),
      ) as _i3.Future<_i6.Either<String, String>>);
  @override
  _i3.Future<_i6.Either<String, String>> getGPTStory({
    required String? prompt,
    int? maxTokens = 1000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGPTStory,
          [],
          {
            #prompt: prompt,
            #maxTokens: maxTokens,
          },
        ),
        returnValue: _i3.Future<_i6.Either<String, String>>.value(
            _FakeEither_5<String, String>(
          this,
          Invocation.method(
            #getGPTStory,
            [],
            {
              #prompt: prompt,
              #maxTokens: maxTokens,
            },
          ),
        )),
      ) as _i3.Future<_i6.Either<String, String>>);
}
